//垃圾的要死
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> map=new HashMap<>();
        int length=nums.length/2;
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
                
            }else{
                map.put(nums[i],1);
            }
            if(map.get(nums[i])>length) return nums[i];
        }
        return -1;
       
    }
}
//摩尔投票法
class Solution {
    public int majorityElement(int[] nums) {
         int ret=nums[0];
        int count=1;
        for(int num:nums){
            if(num==ret){
                count++;
            }else{
                count--;
                if(count==0){
                    count=1;
                    ret=num;
                }
            }
        }
        return ret;
    }
}
首先，数组中出现次数大于 [n/2 ]的元素只可能有一个（假设这个数字在数组中一定存在）。摩尔投票算法是扫描整个数组，每次从其中选择两个不相同的数字删除掉，直到最后剩下一个数字或几个相同的数字，就是出现次数大于总数一半的那个。

（1）先定义一个基数（数组中可以直接使用索引，下面程序中时i,）和一个计数器(count）。

（2）计数器基数为1，代表已经扫描过nums[0],从索引1的位置开始扫描整个数组（也可以直接从头开始），遇到与基数相同的数加1，遇到不同的数减1。

（3）当计数器为0时，数据被分为两段，前一段数据中被计数的元素数和基数数量是相等的，而后面的数据又满足词频最高的数大于总数一半的情形，因此后面的数据就成为了我们的下一个目标，前面的数据就被舍弃了。

（4）完毕之后索引i记录的那个数就是出现次数最多的数。
