/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //采用递归的方式
class Solution {
    public boolean isSymmetric(TreeNode root) {
       return isMirrorTree(root,root);
    }
    
    public boolean  isMirrorTree(TreeNode p,TreeNode q){
    if(p==null)  return q==null;
    else if(q==null)   return p==null;
    else if(p.val==q.val){
        return isMirrorTree(p.left,q.right)&&isMirrorTree(p.right,q.left);
    }else{
        return false;
    }
}
}

//官方采用的迭代方式
public boolean isSymmetric(TreeNode root) {
    Queue<TreeNode> q = new LinkedList<>();
    q.add(root);
    q.add(root);
    while (!q.isEmpty()) {
        TreeNode t1 = q.poll();
        TreeNode t2 = q.poll();
        if (t1 == null && t2 == null) continue;
        if (t1 == null || t2 == null) return false;
        if (t1.val != t2.val) return false;
        q.add(t1.left);
        q.add(t2.right);
        q.add(t1.right);
        q.add(t2.left);
    }
    return true;
}
