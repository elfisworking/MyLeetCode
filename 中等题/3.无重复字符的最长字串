//用滑动窗口的方法
class Solution {
    public int lengthOfLongestSubstring(String s) {
       Set<Character> set=new HashSet<Character>();
        int i=0;
        int j=0;
        int length=s.length();
        int ans=0;
        while(i<length&&j<length){
            if(!(set.contains(s.charAt(j)))){
                set.add(s.charAt(j++));
               ans=Math.max(ans,j-i);
            }else{
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}
通过使用 HashSet 作为滑动窗口，我们可以用 O(1)O(1) 的时间来完成对字符是否在当前的子字符串中的检查。

滑动窗口是数组/字符串问题中常用的抽象概念。 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，
即 [i, j)[i,j)（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 [i, j)[i,j) 向右滑动 11 个元素，
则它将变为 [i+1, j+1)[i+1,j+1)（左闭，右开）。

回到我们的问题，我们使用 HashSet 将字符存储在当前窗口 [i, j)[i,j)（最初 j = ij=i）中。 然后我们向右侧滑动索引 jj，
如果它不在 HashSet 中，我们会继续滑动 jj。直到 s[j] 已经存在于 HashSet 中。此时，我们找到的没有重复字符的最长子字
符串将会以索引 ii 开头。如果我们对所有的 ii 这样做，就可以得到答案。
